Index: src/main/java/com/handson/searchengine/model/UrlSearchDoc.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/searchengine/model/UrlSearchDoc.java b/src/main/java/com/handson/searchengine/model/UrlSearchDoc.java
new file mode 100644
--- /dev/null	(date 1644419920632)
+++ b/src/main/java/com/handson/searchengine/model/UrlSearchDoc.java	(date 1644419920632)
@@ -0,0 +1,72 @@
+package com.handson.searchengine.model;
+
+import java.util.Objects;
+
+public class UrlSearchDoc {
+    private String url;
+    private String baseUrl;
+    private String content;
+    private int level;
+    private String crawlId;
+
+    public static UrlSearchDoc of(String crawlId, String content, String url, String baseUrl, int level) {
+        UrlSearchDoc res = new UrlSearchDoc();
+        res.crawlId = crawlId;
+        res.url = url;
+        res.baseUrl = baseUrl;
+        res.content = content;
+        res.level = level;
+        return res;
+    }
+
+    @Override
+    public String toString() {
+        return "UrlSearchDoc{" +
+                "crawlId='" + crawlId + '\'' +
+                ", url='" + url + '\'' +
+                ", baseUrl='" + baseUrl + '\'' +
+                ", content='" + content + '\'' +
+                ", level=" + level +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        UrlSearchDoc that = (UrlSearchDoc) o;
+        return level == that.level &&
+                Objects.equals(url, that.url) &&
+                Objects.equals(baseUrl, that.baseUrl) &&
+                Objects.equals(content, that.content);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(url, baseUrl, content, level);
+    }
+
+    public String getCrawlId() {
+        return crawlId;
+    }
+
+    public void setCrawlId(String crawlId) {
+        this.crawlId = crawlId;
+    }
+
+    public String getUrl() {
+        return url;
+    }
+
+    public String getBaseUrl() {
+        return baseUrl;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public int getLevel() {
+        return level;
+    }
+}
Index: src/main/java/com/handson/searchengine/util/ElasticSearch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/searchengine/util/ElasticSearch.java b/src/main/java/com/handson/searchengine/util/ElasticSearch.java
new file mode 100644
--- /dev/null	(date 1644436927536)
+++ b/src/main/java/com/handson/searchengine/util/ElasticSearch.java	(date 1644436927536)
@@ -0,0 +1,47 @@
+package com.handson.searchengine.util;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.handson.searchengine.model.UrlSearchDoc;
+import okhttp3.*;
+import org.apache.tomcat.util.codec.binary.Base64;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.HttpHeaders;
+import org.springframework.stereotype.Component;
+
+
+
+@Component
+public class ElasticSearch {
+    OkHttpClient client =  new OkHttpClient();
+
+    @Value("${elasticsearch.base.url}")
+    private String ELASTIC_SEARCH_URL;
+    @Value("${elasticsearch.key}")
+    private  String API_KEY;
+    @Value("${elasticsearch.index}")
+    private  String index;
+    @Autowired
+    ObjectMapper om;
+
+
+    public  void addData(UrlSearchDoc doc)  {
+        try {
+            String auth =  new String(Base64.encodeBase64(API_KEY.getBytes()));
+            String content = om.writeValueAsString(doc);
+            MediaType mediaType = MediaType.parse("application/json");
+            RequestBody body = RequestBody.create(mediaType, content);
+            Request request = new Request.Builder()
+                    .url(ELASTIC_SEARCH_URL +  "/"+ index + "/doc")
+                    .method("POST", body)
+                    .addHeader("Content-Type", "application/json")
+                    .addHeader(HttpHeaders.AUTHORIZATION, "Basic " + auth)
+                    .build();
+            Response response =  client.newCall(request).execute();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
